import json
from main import OpenAI, OPENAI_KEY, config
import httpx
import asyncio
from aiogram import types, Bot
from main import dp, bot, db, channels, js
from channel_joined import get_channel_member, is_member_in_channel
from openai import RateLimitError, BadRequestError
users_message = {}

proxy = config["proxy"]
openai = OpenAI(
    api_key=OPENAI_KEY,

    http_client=httpx.Client(
        proxies=proxy,
        transport=httpx.HTTPTransport(local_address="0.0.0.0"),
    ),
)


@dp.message_handler(commands=['start'])
async def start(message: types.Message):

    await message.answer("""–ü—Ä–∏–≤–µ—Ç!

–í—ã –ø–æ–ø–∞–ª–∏ –≤ –±–æ—Ç —Å–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º, –¥–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø—Ä–∏–≤–ª–µ—á—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –≤–∞—à –ø—Ä–æ–µ–∫—Ç!   

–í—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º, –∫–∞–∫ —Å –∂–∏–≤—ã–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º, –∑–∞–¥–∞–≤–∞—è –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ.

üöÄ –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –±–æ—Ç–æ–º –≤–º–µ—Å—Ç–µ —Å –≤–∞–º–∏ –ø–æ–ª—å–∑—É—é—Ç—Å—è –µ—â—ë —Ç—ã—Å—è—á–∏ —á–µ–ª–æ–≤–µ–∫, –æ–Ω –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π.""")
    db.add_user(full_name=message.from_user.full_name,
                telegram_id=message.from_user.id,
                username=message.from_user.username
                )


@dp.message_handler(commands=['add_chat'])
async def mailing(message: types.Message):
    result = message.get_args()
    result = list(
        map(lambda x: x.strip().replace("\n", ""), result.split(" ")))
    group_id = str(result[0])
    group_name = result[1]
    await message.bot.get_chat_member(group_id, message.from_user.id)
    try:
        member = await get_channel_member(group_id, message)
    except:
        await message.answer("–û—à–∏–±–∫–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—Å—Ç—å –ª–∏ —É –±–æ—Ç–∞ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    if js.set_new_channel_for_subscribe(group_id, group_name):
        await message.answer("–£—Å–ø–µ—à–Ω–æ")
    else:
        await message.answer("–û—à–∏–±–∫–∞")


@dp.message_handler(commands=['delete_chat'])
async def mailing(message: types.Message):
    result = message.get_args().split(" ")
    group_id = str(result[0]).strip()
    if js.delete_channel_for_subscribe(group_id):
        await message.answer("–£—Å–ø–µ—à–Ω–æ")
    else:
        await message.answer("–û—à–∏–±–∫–∞")


@dp.message_handler(commands=['mailing'])
async def mailing(message: types.Message):
    result = message.get_args()
    users = db.get_all_users()
    for user in users:
        await bot.send_message(chat_id=user[2], text=result)


@dp.callback_query_handler(lambda call: call.data == "check")
async def check(callback: types.CallbackQuery):
    channels_text = ""
    all_joined = True
    for key, value in js.get_channels().items():
        member = await get_channel_member(key, callback)
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(
            text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check"))
        if not is_member_in_channel(member):
            all_joined = False
            channels_text += "\n"+value

    if not all_joined:
        await callback.message.answer(text=f"–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏.\n–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º - –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å {channels_text}",
                                      reply_markup=markup)
    else:
        await callback.message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")


@dp.message_handler()
async def communicate(message: types.Message):
    wait = await message.answer("–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç‚Ä¶")
    try:
        try:
            users_message[message.from_user.id]
        except:
            users_message[message.from_user.id] = []
        users_message[message.from_user.id].append(
            {"role": "user", "content": message.text})
        response = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=users_message[message.from_user.id]
        )
        answer = response.choices[0].message.content
        users_message[message.from_user.id].append(
            {"role": "assistant", "content": answer})
        await message.reply(answer)
    except RateLimitError as ex:
        print(ex)
        await asyncio.sleep(20)
        await wait.delete()
        await communicate(message)
    except BadRequestError as ex:
        print(ex)
        users_message[message.from_user.id] = []
        await wait.delete()
        await communicate(message)

    except Exception as ex:
        print(ex)
        users_message[message.from_user.id] = []
        await wait.delete()
        await communicate(message=message)
        # await message.reply("–ù–µ –ø–æ–Ω–∏–º–∞—é, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –ø–æ–¥—Ä—É–≥–æ–º—É")
